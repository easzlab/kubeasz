- name: 创建flannel cni 相关目录
  file: name={{ item }} state=directory
  with_items:
  - /etc/cni/net.d
  - /opt/kube/kube-system/flannel
  - /opt/kube/images

- name: 下载flannel cni plugins
  copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
  - bridge
  - flannel
  - host-local
  - loopback
  - portmap

- name: 准备 flannel DaemonSet yaml文件
  template: src=kube-flannel.yaml.j2 dest=/opt/kube/kube-system/flannel/kube-flannel.yaml

# 【可选】推送离线docker 镜像，可以忽略执行错误
- name: 尝试推送离线docker 镜像（若执行失败，可忽略）
  copy: src={{ base_dir }}/down/{{ item }} dest=/opt/kube/images/{{ item }}
  with_items:
  - "pause_3.1.tar"
  - "{{ flannel_offline }}"
  ignore_errors: true

- name: 获取目录下离线镜像信息
  command: "ls /opt/kube/images"
  register: image_info

# 如果目录下有离线镜像，就把它导入到node节点上
- name: 导入 flannel的离线镜像（若执行失败，可忽略）
  shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ flannel_offline }}"
  when: 'flannel_offline in image_info.stdout'
  ignore_errors: true

# 如果目录下有离线镜像，就把它导入到node节点上
- name: 导入 pause的离线镜像（若执行失败，可忽略）
  shell: "{{ bin_dir }}/docker load -i /opt/kube/images/pause_3.1.tar"
  when: '"pause_3" in image_info.stdout'
  ignore_errors: true

# 只需单节点执行一次
- name: 运行 flannel网络
  shell: "{{ bin_dir }}/kubectl apply -f /opt/kube/kube-system/flannel/ && sleep 5"
  run_once: true

# 删除原有cni配置
- name: 删除默认cni配置
  file: path=/etc/cni/net.d/10-default.conf state=absent

# 等待网络插件部署成功，视下载镜像速度而定
- name: 轮询等待flannel 运行，视下载镜像速度而定
  shell: "{{ bin_dir }}/kubectl get pod -n kube-system -o wide|grep 'flannel'|grep ' {{ inventory_hostname }} '|awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  retries: 12
  delay: 8

