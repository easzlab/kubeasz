- block:
    - name: 准备 cloud-controller-manager rabc的部署文件
      template: src=ali-ccm/ccm-rabc.yaml.j2 dest={{ cluster_dir }}/yml/ccm-rabc.yaml

    - name: 准备 cloud-controller-manager daemonset的部署文件
      template: src=ali-ccm/ccm-daemonset.yaml.j2 dest={{ cluster_dir }}/yml/ccm-daemonset.yaml

    - name: 创建rabc部署
      shell: "{{ base_dir }}/bin/kubectl apply -f {{ cluster_dir }}/yml/ccm-rabc.yaml"

    - name: 注册变量 ccm_token_TMP
      shell: "cat /etc/kubernetes/ssl/ca.pem |base64 -w 0"
      register: ccm_token_TMP

    - name: 设置变量 ccm_token
      set_fact: ccm_token={{ ccm_token_TMP.stdout }}

    - name: 注册变量 CA_DATA_TMP
      #      shell: "kubectl get sa cloud-controller-manager -n kube-system -o json|jq .secrets[0].name|xargs -I {} kubectl get secret {} -n kube-system -o json |jq .data.token"
      shell: "kubectl get sa cloud-controller-manager -n kube-system -o jsonpath='{.secrets[0].name}'|xargs -I {} kubectl get secret {} -n kube-system -o jsonpath='{.data.token}'"
      register: CA_DATA_TMP

    - name: 设置变量 CA_DATA
      set_fact: CA_DATA={{ CA_DATA_TMP.stdout }}

    - name: 准备 cloud-controller-manager 配置文件
      template: src=ali-ccm/cloud-controller-manager.conf.j2 dest={{ cluster_dir }}/cloud-controller-manager.conf

    - name: 创建daemonset部署
      shell: "{{ base_dir }}/bin/kubectl apply -f {{ cluster_dir }}/yml/ccm-daemonset.yaml"
  run_once: true
  connection: local

- name: 分发 cloud-controller-manager 配置文件
  copy: src={{ cluster_dir }}/cloud-controller-manager.conf dest=/etc/kubernetes/cloud-controller-manager.conf
  when: inventory_hostname in groups['kube_master']

- name: 创建daemonset部署
  shell: "{{ base_dir }}/bin/kubectl apply -f {{ cluster_dir }}/yml/ccm-daemonset.yaml"
  run_once: true
  connection: local






